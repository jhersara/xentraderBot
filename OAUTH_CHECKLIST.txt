╔══════════════════════════════════════════════════════════════════════╗
║                 CHECKLIST DE CONFIGURACIÓN OAUTH                     ║
║                      XENTRADERS BOT                                  ║
╚══════════════════════════════════════════════════════════════════════╝

┌──────────────────────────────────────────────────────────────────────┐
│ PASO 1: VERIFICAR PREREQUISITOS                                     │
└──────────────────────────────────────────────────────────────────────┘

[ ] Python 3.7 o superior instalado
[ ] pip actualizado (pip install --upgrade pip)
[ ] Dependencias instaladas:
    [ ] supabase
    [ ] customtkinter
    [ ] pillow
    [ ] pystray
[ ] Puerto 8000 disponible
[ ] Proyecto de Supabase creado

Comando para instalar todo:
pip install supabase customtkinter pillow pystray


┌──────────────────────────────────────────────────────────────────────┐
│ PASO 2: CONFIGURAR SUPABASE                                         │
└──────────────────────────────────────────────────────────────────────┘

[ ] Ir a: https://app.supabase.com
[ ] Abrir tu proyecto
[ ] Navegar a: Authentication → URL Configuration
[ ] Agregar Redirect URL: http://localhost:8000
[ ] Hacer clic en "Save"
[ ] Esperar 30 segundos para que apliquen los cambios

URL de tu proyecto: _______________________________________


┌──────────────────────────────────────────────────────────────────────┐
│ PASO 3: CONFIGURAR GOOGLE OAUTH (Opcional)                          │
└──────────────────────────────────────────────────────────────────────┘

[ ] Ir a: https://console.cloud.google.com
[ ] Crear o seleccionar un proyecto
[ ] Habilitar Google+ API
[ ] Ir a: APIs & Services → Credentials
[ ] Crear OAuth 2.0 Client ID
[ ] Tipo: Desktop app (o Web application)
[ ] Agregar Authorized redirect URIs:
    [ ] http://localhost:8000
    [ ] https://[tu-proyecto].supabase.co/auth/v1/callback
[ ] Copiar Client ID: _______________________________________
[ ] Copiar Client Secret: _______________________________________
[ ] En Supabase: Authentication → Providers → Google
[ ] Pegar Client ID y Client Secret
[ ] Habilitar proveedor
[ ] Guardar cambios


┌──────────────────────────────────────────────────────────────────────┐
│ PASO 4: CONFIGURAR FACEBOOK OAUTH (Opcional)                        │
└──────────────────────────────────────────────────────────────────────┘

[ ] Ir a: https://developers.facebook.com
[ ] Crear una nueva app (tipo: Consumer)
[ ] Ir a: Settings → Basic
[ ] Copiar App ID: _______________________________________
[ ] Copiar App Secret: _______________________________________
[ ] Agregar producto: Facebook Login
[ ] Ir a: Facebook Login → Settings
[ ] Agregar Valid OAuth Redirect URIs:
    [ ] http://localhost:8000
    [ ] https://[tu-proyecto].supabase.co/auth/v1/callback
[ ] Guardar cambios
[ ] En Supabase: Authentication → Providers → Facebook
[ ] Pegar App ID y App Secret
[ ] Habilitar proveedor
[ ] Guardar cambios


┌──────────────────────────────────────────────────────────────────────┐
│ PASO 5: CONFIGURAR VARIABLES DE ENTORNO (Recomendado)               │
└──────────────────────────────────────────────────────────────────────┘

[ ] Instalar python-dotenv: pip install python-dotenv
[ ] Crear archivo .env en la raíz del proyecto
[ ] Agregar las siguientes variables:

    SUPABASE_URL=_______________________________________
    SUPABASE_KEY=_______________________________________
    GOOGLE_CLIENT_ID=_______________________________________
    GOOGLE_CLIENT_SECRET=_______________________________________
    FACEBOOK_APP_ID=_______________________________________
    FACEBOOK_APP_SECRET=_______________________________________

[ ] Crear archivo .env.example (sin valores sensibles)
[ ] Agregar .env al .gitignore
[ ] Modificar utils/auth.py para usar variables de entorno


┌──────────────────────────────────────────────────────────────────────┐
│ PASO 6: VERIFICAR CONFIGURACIÓN                                     │
└──────────────────────────────────────────────────────────────────────┘

[ ] Ejecutar diagnóstico: python diagnose_oauth.py
[ ] Verificar que todas las comprobaciones pasen
[ ] Revisar mensajes de error si los hay
[ ] Corregir problemas encontrados


┌──────────────────────────────────────────────────────────────────────┐
│ PASO 7: PROBAR AUTENTICACIÓN                                        │
└──────────────────────────────────────────────────────────────────────┘

[ ] Ejecutar prueba: python test_oauth.py
[ ] Hacer clic en botón "Google"
[ ] Se abre navegador automáticamente
[ ] Seleccionar cuenta de Google
[ ] Ver página de éxito en el navegador
[ ] Verificar que la aplicación detecte el login
[ ] Repetir con Facebook si está configurado


┌──────────────────────────────────────────────────────────────────────┐
│ PASO 8: INTEGRAR EN TU APLICACIÓN                                   │
└──────────────────────────────────────────────────────────────────────┘

[ ] Importar LoginView en tu archivo principal
[ ] Crear función callback on_login_success
[ ] Abrir ventana principal después del login
[ ] Probar flujo completo
[ ] Implementar logout
[ ] Implementar persistencia de sesión


┌──────────────────────────────────────────────────────────────────────┐
│ VERIFICACIÓN FINAL                                                   │
└──────────────────────────────────────────────────────────────────────┘

[ ] Login con email/password funciona
[ ] Login con Google funciona
[ ] Login con Facebook funciona
[ ] Registro de nuevos usuarios funciona
[ ] Página de éxito se muestra correctamente
[ ] Aplicación detecta autenticación exitosa
[ ] Usuario puede acceder al panel principal
[ ] Logout funciona correctamente
[ ] No hay errores en la consola


╔══════════════════════════════════════════════════════════════════════╗
║                      COMANDOS ÚTILES                                 ║
╚══════════════════════════════════════════════════════════════════════╝

Instalar dependencias:
> pip install supabase customtkinter pillow pystray python-dotenv

Diagnosticar sistema:
> python diagnose_oauth.py

Probar OAuth:
> python test_oauth.py

Ejecutar aplicación:
> python main.py


╔══════════════════════════════════════════════════════════════════════╗
║                     SOLUCIÓN DE PROBLEMAS                            ║
╚══════════════════════════════════════════════════════════════════════╝

Problema: "Redirect URL not allowed"
├─ Solución 1: Verifica http://localhost:8000 en Supabase
├─ Solución 2: Espera 30-60 segundos después de guardar
└─ Solución 3: Verifica que no haya espacios extra en la URL

Problema: "Puerto 8000 ocupado"
├─ Solución 1: Cierra otras aplicaciones
├─ Solución 2: Cambia el puerto en utils/auth.py
└─ Solución 3: Reinicia tu computadora

Problema: "OAuth provider not configured"
├─ Solución 1: Verifica que el proveedor esté habilitado en Supabase
├─ Solución 2: Revisa que las credenciales sean correctas
└─ Solución 3: Espera que se propaguen los cambios (1-2 minutos)

Problema: "Timeout"
├─ Solución 1: Aumenta el timeout en utils/auth.py
├─ Solución 2: Verifica tu conexión a Internet
└─ Solución 3: Intenta con modo incógnito en el navegador


╔══════════════════════════════════════════════════════════════════════╗
║                      RECURSOS ADICIONALES                            ║
╚══════════════════════════════════════════════════════════════════════╝

Documentación detallada:
├─ OAUTH_SETUP.md - Guía completa paso a paso
├─ OAUTH_QUICKSTART.md - Inicio rápido (5 minutos)
├─ OAUTH_FLOW_DIAGRAM.txt - Diagrama del flujo
├─ SECURITY_BEST_PRACTICES.md - Mejores prácticas
└─ OAUTH_SUMMARY.md - Resumen ejecutivo

URLs importantes:
├─ Supabase: https://app.supabase.com
├─ Google Cloud: https://console.cloud.google.com
└─ Facebook Dev: https://developers.facebook.com


╔══════════════════════════════════════════════════════════════════════╗
║                         NOTAS IMPORTANTES                            ║
╚══════════════════════════════════════════════════════════════════════╝

⚠️  NUNCA compartas tus credenciales en repositorios públicos
⚠️  Usa variables de entorno para credenciales en producción
⚠️  Agrega .env a tu .gitignore
⚠️  Usa cuentas de prueba durante el desarrollo
⚠️  Mantén tus dependencias actualizadas

✓  El puerto 8000 solo se usa temporalmente durante auth
✓  El servidor se cierra automáticamente después del login
✓  No necesitas configurar firewall para localhost
✓  Funciona en Windows, Mac y Linux

📝  Guarda este checklist para referencia futura
📝  Marca cada paso a medida que lo completes
📝  Si tienes problemas, revisa la documentación
📝  Ejecuta diagnose_oauth.py regularmente


╔══════════════════════════════════════════════════════════════════════╗
║                    ¡TODO LISTO PARA EMPEZAR!                         ║
╚══════════════════════════════════════════════════════════════════════╝

Fecha de configuración: ___ / ___ / _____
Configurado por: _______________________
Notas adicionales:

___________________________________________________________________

___________________________________________________________________

___________________________________________________________________


Versión: 1.0.0
Última actualización: Octubre 2025
